---
- name: Near Installer
  hosts: all
  roles:
    - role: '../_roles/has_rust_compiler'
      vars:
        toolchain: 'stable'

  tasks:
    - name: Check suport
      shell: "lscpu | grep -P '(?=.*avx )(?=.*sse4.2 )(?=.*cx16 )(?=.*popcnt )' > /dev/null"
      args:
        executable: /bin/bash

    - name: Install Required Deps
      apt:
        update_cache: yes
        name:
          - awscli
          - binutils-dev 
          - build-essential 
          - cargo
          - clang
          - cmake
          - docker.io
          - g++
          - gcc
          - libcurl4-openssl-dev
          - libdw-dev
          - libiberty-dev
          - libssl-dev
          - llvm
          - make
          - pkg-config
          - protobuf-compiler
          - python
          - python3-pip
          - zlib1g-dev
      become: yes

    - name: Clone
      git:
        repo: 'https://github.com/near/nearcore'
        dest: '~/nearcore'
        version: '8448ad1ebf27731a43397686103aa5277e7f2fcf'

    - name: Build
      shell: 'source ~/.cargo/env && cd ~/nearcore/ && cargo build -p neard --release --features shardnet'
      args:
        executable: /bin/bash

    - name: Check .near folder exists
      stat:
        path: "~/.near"
      register: near_initialized

    - name: Init folder
      shell: 'cd ~/nearcore && ./target/release/neard --home ~/.near init --chain-id shardnet --download-genesis'
      args:
        executable: /bin/bash
        # when: not near_initialized.stat.exists

    - name: Remove default config
      file:
        state: absent
        path: "~/.near/config.json"

    - name: Download config
      get_url:
        url: 'https://s3-us-west-1.amazonaws.com/build.nearprotocol.com/nearcore-deploy/shardnet/config.json'
        dest: "~/.near/config.json"
        force: yes

    - name: Patch config
      shell: "sed -e 's/archive\": false/archive\": true/' -i ~/.near/config.json"

#    - name: Restore old files
#      copy:
#        src: ~/.near-old/{{ item }}
#        dest: ~/.near/{{ item }}
#        remote_src: yes
#      loop:
#        - validator_key.json
#        - node_key.json

    - name: Copy near_validator.sh file
      template:
        src: "{{ item }}"
        dest: "{{ ansible_facts['env']['HOME'] }}/{{ item }}"
        mode: '0755'
        force: 'yes'
      loop:
        - near_validator.sh
        - near_download_snapshot.sh

    - name: Copy service file
      template:
        src: "near.service"
        dest: "/etc/systemd/system/near.service"
        mode: '0644'
        force: 'yes'
      become: yes

    - name: Patch config
      tags:
        prometheus
      replace:
        path: "~/.near/config.json"
        regexp: '"prometheus_addr": null,'
        replace: '"prometheus_addr": "0.0.0.0:3031",'

    - name: Start near service
      tags:
        prometheus
      become: yes
      systemd:
        state: restarted
        enabled: yes
        daemon_reload: yes
        name: near

    - name: Create Folder for NodeJS
      tags:
        - wallet
      file:
        path: "~/nodejs-18.6"
        state: "directory"

    - name: Download NodeJS
      tags:
        - wallet
      get_url:
        url: 'https://nodejs.org/dist/v18.6.0/node-v18.6.0-linux-x64.tar.xz'
        dest: "~/nodejs-18.6"
        checksum: "sha256:6a33e0ad02c9a3ce0ab298bba95055d45df05dfe0810e871ab5087d9f7852017"

    - name: Extract NodeJS
      tags:
        - wallet
      unarchive:
        src: "~/nodejs-18.6/node-v18.6.0-linux-x64.tar.xz"
        dest: "~/nodejs-18.6"
        remote_src: yes

    - name: Install NEAR-cli
      tags:
        - wallet
      shell: "export PATH=\"{{ ansible_facts['env']['HOME'] }}/nodejs-18.6/node-v18.6.0-linux-x64/bin:$PATH\"; npm install -g near-cli"
      args:
        executable: /bin/bash
      become: yes

    - name: Ensure everything for near is in .bashrc
      tags:
        - wallet
      blockinfile:
        dest: "{{ ansible_env.HOME }}/.bashrc"
        block: |
          export PATH="{{ ansible_env.HOME }}/nodejs-18.6/node-v18.6.0-linux-x64/bin:$PATH"
          export NEAR_ENV=shardnet
        marker: '# {mark} ANSIBLE MANAGED BLOCK - near'
        insertbefore: BOF
        create: yes

    - name: Install Pool creator deps
      tags:
        - poolcreate
      apt:
        update_cache: yes
        name:
          - jq
      become: yes

    - name: Install Pool creator
      tags:
        - poolcreate
      template:
        src: "{{ item }}"
        dest: "{{ ansible_facts['env']['HOME'] }}/{{ item }}"
        mode: '0755'
        force: 'yes'
      loop:
        - near_pool_create.sh
        - near_stake.sh

    - name: Install Pool creator
      tags:
        - ping
      template:
        src: "{{ item }}"
        dest: "{{ ansible_facts['env']['HOME'] }}/{{ item }}"
        mode: '0755'
        force: 'yes'
      loop:
        - near_ping.sh

    - name: Pinger
      tags:
        - ping
      cron:
        name: "ping NEAR"
        minute: "*/5"
        hour: "*"
        job: "{{ ansible_facts['env']['HOME'] }}/near_ping.sh -f > /tmp/near_ping.latest 2>&1"

    - name: Near Restarter
      tags:
        - restartafterfork
      template:
        src: "{{ item }}"
        dest: "{{ ansible_facts['env']['HOME'] }}/{{ item }}"
        mode: '0755'
        force: 'yes'
      loop:
        - near_restart_after_fork.sh
